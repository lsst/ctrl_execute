name: build_and_test

on:
  push:
    branches:
      - main
      - "u/**"
    tags:
      - "*"
  pull_request:

jobs:
  build_and_test:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4
        with:
          # Need to clone everything for the git tags.
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.5.x"
          enable-cache: true
          python-version: ${{ matrix.python-version }}

      - name: Write version information
        run: >-
          uv run --with "lsst_versions" --isolated --no-sync
          python -c "from lsst_versions._cmd import main; main()" --write-version .

      - name: Install dependencies
        run: |
          uv sync --no-install-project

      - name: Run tests
        run: >-
          uv run pytest -r a -v -n 3
          --cov=lsst.ctrl.exec --cov-report=xml --cov-report=term --cov-branch
          --junitxml=junit.xml -o junit_family=legacy

      # - name: Upload coverage to codecov
      #   uses: codecov/codecov-action@v4
      #   with:
      #     files: ./coverage.xml
      #     token: ${{ secrets.CODECOV_TOKEN }}

      # - name: Upload test results to Codecov
      #   if: ${{ !cancelled() }}
      #   uses: codecov/test-results-action@v1
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}

  pypi:
    runs-on: ubuntu-24.04
    needs: [build_and_test]
    # The "not starts with 's'" is meant to catch server release tags in the
    # form 'server/x.y.z'
    # if: startsWith(github.ref, 'refs/tags') && ! startsWith(github.ref, 'refs/tags/s')

    steps:
      - uses: actions/checkout@v4
        with:
          # Need to clone everything to embed the version.
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.5.x"
          enable-cache: true
          python-version: "3.11"

      - name: Write version information
        run: >-
          uv run --with "lsst_versions" --isolated --no-sync
          python -c "from lsst_versions._cmd import main; main()" --write-version .

      - name: Build and create distribution
        run: |
          uv build

      # - name: Upload
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   with:
      #     user: __token__
      #     password: ${{ secrets.PYPI_UPLOADS }}
